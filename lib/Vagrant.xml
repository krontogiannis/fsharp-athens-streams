<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>Vagrant</name></assembly>
<members>
<member name="P:Nessos.Vagrant.AssemblyId.ImageHash">
<summary>
 digest of the raw assembly image
</summary>
</member>
<member name="P:Nessos.Vagrant.AssemblyId.FullName">
<summary>
 assembly qualified name
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Nessos.Vagrant.AssemblyId">
<summary>
 unique identifier for assembly
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Nessos.Vagrant.AssemblyLoadInfo">
<summary>
 Assembly load information
</summary>
</member>
<member name="F:Nessos.Vagrant.AssemblyLoadPolicy.CacheOnly">
<summary>
 Assemblies are to be cached only, not loaded in AppDomain
</summary>
</member>
<member name="F:Nessos.Vagrant.AssemblyLoadPolicy.RequireIdentical">
<summary>
 If assembly is to be resolved locally, then it should have identical SHA256 hashcode.
</summary>
</member>
<member name="F:Nessos.Vagrant.AssemblyLoadPolicy.ResolveAll">
<summary>
 All assembly names can be looked up by runtime
</summary>
</member>
<member name="F:Nessos.Vagrant.AssemblyLoadPolicy.ResolveStrongNames">
<summary>
 Only signed assemblies should be looked up by runtime
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Nessos.Vagrant.AssemblyLoadPolicy">
<summary>
 Specifies what assemblies are to be loaded 
 locally by the runtime if possible.
</summary>
</member>
<member name="P:Nessos.Vagrant.AssemblyPackage.StaticInitializer">
<summary>
 Static initialization data
</summary>
</member>
<member name="P:Nessos.Vagrant.AssemblyPackage.Symbols">
<summary>
 Symbols file
</summary>
</member>
<member name="P:Nessos.Vagrant.AssemblyPackage.Image">
<summary>
 Raw image of the assembly
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Nessos.Vagrant.AssemblyPackage">
<summary>
 Contains information necessary for the exportation of an assembly
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Nessos.Vagrant.FsiDynamicAssemblyProfile">
<summary>
 Dynamic Assembly profile for F# Interactive
</summary>
</member>
<member name="P:Nessos.Vagrant.IDynamicAssemblyProfile.Description">
<summary>
 a short description of the profile
</summary>
</member>
<member name="M:Nessos.Vagrant.IDynamicAssemblyProfile.PickleStaticField(System.Reflection.FieldInfo,System.Boolean)">
<summary>
 Specifies if static field is to be pickled
</summary>
</member>
<member name="M:Nessos.Vagrant.IDynamicAssemblyProfile.IsPartiallyEvaluatedSlice(Microsoft.FSharp.Core.FSharpFunc{System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.Assembly}},System.Reflection.Assembly)">
<summary>
 Decides if given slices requires fresh evaluation of assemblies
</summary>
</member>
<member name="M:Nessos.Vagrant.IDynamicAssemblyProfile.IsMatch(System.Reflection.Assembly)">
<summary>
 identifies dynamic assemblies that match this profile
</summary>
</member>
<member name="M:Nessos.Vagrant.IDynamicAssemblyProfile.EraseType(System.Type)">
<summary>
 Specifies if type is to be erased from slices
</summary>
</member>
<member name="M:Nessos.Vagrant.IDynamicAssemblyProfile.EraseStaticConstructor(System.Type)">
<summary>
 Specifies if static constructor is to be erased
</summary>
</member>
<member name="M:Nessos.Vagrant.IDynamicAssemblyProfile.AlwaysIncludeType(System.Type)">
<summary>
 Specifies if type is to be included in every iteration of the slice
</summary>
</member>
<member name="T:Nessos.Vagrant.IDynamicAssemblyProfile">
<summary>
 customizes slicing behaviour on given dynamic assembly
</summary>
</member>
<member name="P:Nessos.Vagrant.StaticInitializationInfo.Errors">
<summary>
 Static initialization errors
</summary>
</member>
<member name="P:Nessos.Vagrant.StaticInitializationInfo.IsPartial">
<summary>
 Is partial static initialization data
</summary>
</member>
<member name="P:Nessos.Vagrant.StaticInitializationInfo.Generation">
<summary>
 Generation of given static initializer
</summary>
</member>
<member name="T:Nessos.Vagrant.StaticInitializationInfo">
<summary>
 Static initialization metadata
</summary>
</member>
<member name="P:Nessos.Vagrant.StaticInitializer.IsPartial">
<summary>
 Is partial static initialization data
</summary>
</member>
<member name="P:Nessos.Vagrant.StaticInitializer.Data">
<summary>
 Static initialization data
</summary>
</member>
<member name="P:Nessos.Vagrant.StaticInitializer.Generation">
<summary>
 Generation of given static initializer
</summary>
</member>
<member name="T:Nessos.Vagrant.StaticInitializer">
<summary>
 static initialization data for assembly package
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Nessos.Vagrant.Vagrant.DefaultLoadPolicy(Nessos.Vagrant.AssemblyLoadPolicy)">
<summary>
 Default load policy 
</summary>
</member>
<member name="P:Nessos.Vagrant.Vagrant.UUId">
<summary>
 Unique identifier for the slice compiler
</summary>
</member>
<member name="P:Nessos.Vagrant.Vagrant.TypeConverter">
<summary>
 FsPickler type name converter for use with other formats
</summary>
</member>
<member name="P:Nessos.Vagrant.Vagrant.Pickler">
<summary>
 Returns the pickler used by the slice compiler
</summary>
</member>
<member name="P:Nessos.Vagrant.Vagrant.DefaultLoadPolicy">
<summary>
 Default load policy 
</summary>
</member>
<member name="P:Nessos.Vagrant.Vagrant.CachePath">
<summary>
 Cache directory used by Vagrant
</summary>
</member>
<member name="M:Nessos.Vagrant.Vagrant.TryGetSliceOfType(System.Type)">
 <summary>
     Returns the dynamic assembly slice corresponding to the given type, if exists.
 </summary>
 <param name="t">input type.</param>
</member>
<member name="M:Nessos.Vagrant.Vagrant.ResolveDynamicDependenciesRequiringCompilation(System.Object)">
 <summary>
     Returns a list of dynamic assemblies that require slice compilation
     for the given object graph to be exportable.
 </summary>
 <param name="obj">any object graph</param>
</member>
<member name="M:Nessos.Vagrant.Vagrant.LoadCachedAssembly(Nessos.Vagrant.AssemblyId,Microsoft.FSharp.Core.FSharpOption{Nessos.Vagrant.AssemblyLoadPolicy})">
 <summary>
     Loads an assembly that is already cached in local machine.
 </summary>
 <param name="id">input assembly id.</param>
 <param name="loadPolicy">Specifies assembly resolution policy. Defaults to resolving strong names only.</param>
</member>
<member name="M:Nessos.Vagrant.Vagrant.LoadCachedAssemblies(System.Collections.Generic.IEnumerable{Nessos.Vagrant.AssemblyId},Microsoft.FSharp.Core.FSharpOption{Nessos.Vagrant.AssemblyLoadPolicy})">
 <summary>
     Loads assembly id's that are already cached in local machine.
 </summary>
 <param name="id">input assembly id.</param>
 <param name="loadPolicy">Specifies assembly resolution policy. Defaults to resolving strong names only.</param>
</member>
<member name="M:Nessos.Vagrant.Vagrant.LoadAssemblyPackages(System.Collections.Generic.IEnumerable{Nessos.Vagrant.AssemblyPackage},Microsoft.FSharp.Core.FSharpOption{Nessos.Vagrant.AssemblyLoadPolicy})">
 <summary>
     Loads assembly packages to the local machine.
 </summary>
 <param name="pas">Input assembly packages.</param>
 <param name="loadPolicy">Specifies assembly resolution policy. Defaults to resolving strong names only.</param>
</member>
<member name="M:Nessos.Vagrant.Vagrant.LoadAssemblyPackage(Nessos.Vagrant.AssemblyPackage,Microsoft.FSharp.Core.FSharpOption{Nessos.Vagrant.AssemblyLoadPolicy})">
 <summary>
     Loads assembly package to the local machine.
 </summary>
 <param name="pa">Input assembly package.</param>
 <param name="loadPolicy">Specifies assembly resolution policy. Defaults to resolving strong names only.</param>
</member>
<member name="M:Nessos.Vagrant.Vagrant.IsLocalDynamicAssemblySlice(Nessos.Vagrant.AssemblyId)">
 <summary>
     Checks if assembly id is a locally generated dynamic assembly slice.
 </summary>
 <param name="id">input assembly id.</param>
</member>
<member name="M:Nessos.Vagrant.Vagrant.Initialize(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{Nessos.Vagrant.IDynamicAssemblyProfile}},Microsoft.FSharp.Core.FSharpOption{Nessos.FsPickler.ITypeNameConverter},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Nessos.Vagrant.AssemblyLoadPolicy})">
 <summary>
     Initializes a new Vagrant instance.
 </summary>
 <param name="ignoredAssemblies">Ignore assemblies and their dependencies.</param>
 <param name="cacheDirectory">Temp folder used for assembly compilation and caching. Defaults to system temp folder.</param>
 <param name="profiles">Dynamic assembly configuration profiles.</param>
 <param name="typeConverter">FsPickler type name converter.</param>
 <param name="requireLoadedInAppDomain">
     Demand all transitive dependencies be loadable in current AppDomain.
     If unset, only loaded assemblies are listed as dependencies. Defaults to true.
 </param>
 <param name="loadPolicy">Default assembly load policy.</param>
</member>
<member name="M:Nessos.Vagrant.Vagrant.Initialize(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{Nessos.Vagrant.IDynamicAssemblyProfile}},Microsoft.FSharp.Core.FSharpOption{Nessos.FsPickler.ITypeNameConverter},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{System.Reflection.Assembly,System.Boolean}},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Nessos.Vagrant.AssemblyLoadPolicy})">
 <summary>
     Initializes a new Vagrant instance.
 </summary>
 <param name="cacheDirectory">Temp folder used for assembly compilation and caching. Defaults to system temp folder.</param>
 <param name="profiles">Dynamic assembly configuration profiles.</param>
 <param name="typeConverter">FsPickler type name converter.</param>
 <param name="isIgnoredAssembly">User-defined assembly ignore predicate.</param>
 <param name="requireLoadedInAppDomain">
     Demand all transitive dependencies be loadable in current AppDomain.
     If unset, only loaded assemblies are listed as dependencies. Defaults to true.
 </param>
 <param name="loadPolicy">Default assembly load policy.</param>
</member>
<member name="M:Nessos.Vagrant.Vagrant.GetDynamicAssemblySlices(System.Reflection.Assembly)">
 <summary>
     Returns *all* assembly slices of given dynamic assembly.
 </summary>
 <param name="assembly">a dynamic assembly.</param>
</member>
<member name="M:Nessos.Vagrant.Vagrant.GetAssemblyLoadInfo(System.Collections.Generic.IEnumerable{Nessos.Vagrant.AssemblyId},Microsoft.FSharp.Core.FSharpOption{Nessos.Vagrant.AssemblyLoadPolicy})">
 <summary>
     Gets the local assembly load info for given assembly ids.
 </summary>
 <param name="ids">Given assembly ids.</param>
 <param name="loadPolicy">Specifies assembly resolution policy. Defaults to resolving strong names only.</param>
</member>
<member name="M:Nessos.Vagrant.Vagrant.GetAssemblyLoadInfo(Nessos.Vagrant.AssemblyId,Microsoft.FSharp.Core.FSharpOption{Nessos.Vagrant.AssemblyLoadPolicy})">
 <summary>
     Gets the local assembly load info for given assembly id.
 </summary>
 <param name="id">Given assembly id.</param>
 <param name="loadPolicy">Specifies assembly resolution policy. Defaults to resolving strong names only.</param>
</member>
<member name="M:Nessos.Vagrant.Vagrant.CreateAssemblyPackages(System.Collections.Generic.IEnumerable{Nessos.Vagrant.AssemblyId},System.Boolean,Microsoft.FSharp.Core.FSharpOption{Nessos.Vagrant.AssemblyLoadPolicy})">
 <summary>
     Creates assembly packages out of given assembly ids.
 </summary>
 <param name="ids"></param>
 <param name="includeAssemblyImage">Include raw assembly image in the bundle.</param>
 <param name="loadPolicy">Specifies assembly resolution policy. Defaults to resolving strong names only.</param>
</member>
<member name="M:Nessos.Vagrant.Vagrant.CreateAssemblyPackage(System.Reflection.Assembly,System.Boolean)">
 <summary>
     Builds an assembly package bundle for given input.
 </summary>
 <param name="assembly">Given assembly.</param>
 <param name="includeAssemblyImage">Include raw assembly image in the bundle.</param>
</member>
<member name="M:Nessos.Vagrant.Vagrant.CreateAssemblyPackage(Nessos.Vagrant.AssemblyId,System.Boolean,Microsoft.FSharp.Core.FSharpOption{Nessos.Vagrant.AssemblyLoadPolicy})">
 <summary>
     Creates an assembly package out of a given assembly id.
 </summary>
 <param name="id">assembly id</param>
 <param name="includeAssemblyImage">include assembly image in assembly package.</param>
 <param name="loadPolicy">Specifies assembly resolution policy. Defaults to strong names only.</param>
</member>
<member name="M:Nessos.Vagrant.Vagrant.ComputeObjectDependencies(System.Object,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
     Returns a collection of all assemblies that the given object depends on.
     Dynamic assemblies are substituted for their corresponding static slices.
 </summary>
 <param name="obj">A given object graph</param>
 <param name="permitCompilation">Compile new slices as required. Defaults to false.</param>
</member>
<member name="M:Nessos.Vagrant.Vagrant.CompileDynamicAssemblySlice(System.Reflection.Assembly)">
 <summary>
     Compiles slices for given dynamic assembly, if required.
 </summary>
 <param name="assembly">a dynamic assembly</param>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Nessos.Vagrant.Vagrant">
<summary>
 Vagrant Object which instantiates a dynamic assembly compiler, loader and exporter state
</summary>
</member>
<member name="">

</member>
<member name="T:Nessos.Vagrant.VagrantException">
<summary>
 Exception raised by Vagrant
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Nessos.Vagrant.AssemblyCache">

</member>
<member name="P:Nessos.Vagrant.AssemblyManagement.VagrantState.RequireDependenciesLoadedInAppDomain">
<summary>
 result in failure if any of the listed transitive
 cannot be loaded in the local AppDomain.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Nessos.Vagrant.AssemblyManagement.exportAssembly(Nessos.Vagrant.AssemblyManagement.VagrantState,Nessos.Vagrant.AssemblyLoadPolicy,System.Boolean,Nessos.Vagrant.AssemblyId)">
<summary>
 exports an assembly package

</summary>
</member>
<member name="M:Nessos.Vagrant.AssemblyManagement.registerAssemblyResolutionHandler">
<summary>
 registers an assembly resolution handler based on AppDomain lookups;
 this is needed since assembly lookups often fail when loaded at runtime.
</summary>
</member>
<member name="T:Nessos.Vagrant.AssemblyManagement">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Nessos.Vagrant.AssemblyParser.parseDynamicAssemblySlice(Nessos.Vagrant.SliceCompilerTypes.DynamicAssemblyCompilerState,System.Reflection.Assembly)">
<summary>
 the main assembly parsing method
</summary>
</member>
<member name="">

</member>
<member name="M:Nessos.Vagrant.AssemblyParser.computeSliceData(Nessos.Vagrant.SliceCompilerTypes.DynamicAssemblyState)">
<summary>
 traverses a dynamic assembly and compiles and index of parse information
 to be used for the assembly parser configuration
</summary>
</member>
<member name="T:Nessos.Vagrant.AssemblyParser">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Nessos.Vagrant.Daemon">

</member>
<member name="">

</member>
<member name="M:Nessos.Vagrant.DependencyAnalysis.remapDependencies(Microsoft.FSharp.Core.FSharpFunc{System.Reflection.Assembly,System.Boolean},System.Boolean,Nessos.Vagrant.SliceCompilerTypes.DynamicAssemblyCompilerState,Microsoft.FSharp.Collections.FSharpList{System.Tuple{System.Reflection.Assembly,System.Collections.Generic.IEnumerable{System.Type}}})">
<summary>
 reassigns assemblies so that the correct assembly slices are matched
</summary>
</member>
<member name="M:Nessos.Vagrant.DependencyAnalysis.getDynamicDependenciesRequiringCompilation(Nessos.Vagrant.SliceCompilerTypes.DynamicAssemblyCompilerState,Microsoft.FSharp.Collections.FSharpList{System.Tuple{System.Reflection.Assembly,System.Collections.Generic.IEnumerable{System.Type}}})">
<summary>
 determines the assemblies that require slice compilation based on given dependency input
</summary>
</member>
<member name="">

</member>
<member name="M:Nessos.Vagrant.DependencyAnalysis.parseDynamicAssemblies(Microsoft.FSharp.Core.FSharpFunc{System.Reflection.Assembly,System.Boolean},System.Boolean,Nessos.Vagrant.SliceCompilerTypes.DynamicAssemblyCompilerState,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
<summary>
 parse a collection of assemblies, identify the dynamic assemblies that require slice compilation
 the dynamic assemblies are then parsed to Cecil and sorted topologically for correct compilation order.
</summary>
</member>
<member name="M:Nessos.Vagrant.DependencyAnalysis.traverseDependencies(Microsoft.FSharp.Core.FSharpFunc{System.Reflection.Assembly,System.Boolean},System.Boolean,Microsoft.FSharp.Core.FSharpOption{Nessos.Vagrant.SliceCompilerTypes.DynamicAssemblyCompilerState},System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
<summary>
 recursively traverse assembly dependency graph
</summary>
</member>
<member name="M:Nessos.Vagrant.DependencyAnalysis.tryResolveAssembly(Microsoft.FSharp.Core.FSharpFunc{System.Reflection.Assembly,System.Boolean},System.Boolean,Microsoft.FSharp.Core.FSharpOption{Nessos.Vagrant.SliceCompilerTypes.DynamicAssemblyCompilerState},System.String)">
<summary>
 locally resolve an assembly by qualified name
</summary>
</member>
<member name="P:Nessos.Vagrant.DependencyAnalysis.isIgnoredAssembly">
<summary>
 assemblies ignored by Vagrant during assembly traversal
</summary>
</member>
<member name="">

</member>
<member name="T:Nessos.Vagrant.DependencyAnalysis">

</member>
<member name="M:Nessos.Vagrant.Extras.Utilities.ComputeTypeDependencies(System.Object)">
 <summary>
     Returns all type instances that appear in given object graph.
 </summary>
 <param name="obj">object graph to be traversed</param>
</member>
<member name="M:Nessos.Vagrant.Extras.Utilities.ComputeAssemblyId(System.Reflection.Assembly)">
 <summary>
     Computes a unique id for given static assembly.
 </summary>
 <param name="assembly">a static assembly.</param>
</member>
<member name="M:Nessos.Vagrant.Extras.Utilities.ComputeAssemblyDependencies(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{System.Reflection.Assembly,System.Boolean}},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
     Resolves all assembly dependencies of given assemblies.
 </summary>
 <param name="assemblies"></param>
 <param name="isIgnoredAssembly">User-defined assembly ignore predicate.</param>
 <param name="requireLoadedInAppDomain">
     Demand all transitive dependencies be loadable in current AppDomain.
     If unset, only loaded assemblies are listed as dependencies. Defaults to true.
 </param>
</member>
<member name="M:Nessos.Vagrant.Extras.Utilities.ComputeAssemblyDependencies(System.Reflection.Assembly,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{System.Reflection.Assembly,System.Boolean}},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
     Resolves all assembly dependencies of given assembly.
 </summary>
 <param name="assembly">assembly to be traversed</param>
 <param name="isIgnoredAssembly">User-defined assembly ignore predicate.</param>
 <param name="requireLoadedInAppDomain">
     Demand all transitive dependencies be loadable in current AppDomain.
     If unset, only loaded assemblies are listed as dependencies. Defaults to true.
 </param>
</member>
<member name="M:Nessos.Vagrant.Extras.Utilities.ComputeAssemblyDependencies(System.Object,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{System.Reflection.Assembly,System.Boolean}},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
     Resolves all assembly dependencies of given object graph.
 </summary>
 <param name="obj">object graph to be traversed</param>
 <param name="isIgnoredAssembly">User-defined assembly ignore predicate.</param>
 <param name="requireLoadedInAppDomain">
     Demand all transitive dependencies be loadable in current AppDomain.
     If unset, only loaded assemblies are listed as dependencies. Defaults to true.
 </param>
</member>
<member name="T:Nessos.Vagrant.Extras.Utilities">
 <summary>
     A collection of general purpose utilities on dependency traversal.
 </summary>
</member>
<member name="M:Nessos.Vagrant.Extras.IRemoteAssemblyPublisher.PullAssemblies(Microsoft.FSharp.Collections.FSharpList{Nessos.Vagrant.AssemblyId})">
<summary>
 request assembly packages from publisher
</summary>
</member>
<member name="M:Nessos.Vagrant.Extras.IRemoteAssemblyPublisher.GetRequiredAssemblyInfo">
<summary>
 receives a collection of dependencies required by remote publisher
</summary>
</member>
<member name="T:Nessos.Vagrant.Extras.IRemoteAssemblyPublisher">
<summary>
 Defines an abstract assembly exporter; to be used by VagrantClient
</summary>
</member>
<member name="M:Nessos.Vagrant.Extras.IRemoteAssemblyReceiver.PushAssemblies(Microsoft.FSharp.Collections.FSharpList{Nessos.Vagrant.AssemblyPackage})">
<summary>
 upload a set of assembly packages to the remote party
</summary>
</member>
<member name="M:Nessos.Vagrant.Extras.IRemoteAssemblyReceiver.GetLoadedAssemblyInfo(Microsoft.FSharp.Collections.FSharpList{Nessos.Vagrant.AssemblyId})">
<summary>
 receives the assembly load state of the remote party for the given id&apos;s
</summary>
</member>
<member name="T:Nessos.Vagrant.Extras.IRemoteAssemblyReceiver">
<summary>
 Defines an abstract assembly load target; to be used by VagrantServer
</summary>
</member>
<member name="M:Nessos.Vagrant.Extras.Vagrant.ReceiveDependencies(Nessos.Vagrant.Vagrant,Nessos.Vagrant.Extras.IRemoteAssemblyPublisher,Microsoft.FSharp.Core.FSharpOption{Nessos.Vagrant.AssemblyLoadPolicy})">
 <summary>
     Receive dependencies as supplied by the remote assembly publisher
 </summary>
 <param name="publisher">The remote publisher</param>
 <param name="loadPolicy">Specifies local assembly resolution policy. Defaults to strong names only.</param>
</member>
<member name="M:Nessos.Vagrant.Extras.Vagrant.SubmitObjectDependencies(Nessos.Vagrant.Vagrant,Nessos.Vagrant.Extras.IRemoteAssemblyReceiver,System.Object,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
     Apply the built-in assembly distribution protocol using user-defined function.
 </summary>
 <param name="receiver">User provided assembly submit operation.</param>
 <param name="obj">Object, whose dependent assemblies are to be exported.</param>
 <param name="permitCompilation">Compile dynamic assemblies in the background, as required. Defaults to false.</param>
</member>
<member name="M:Nessos.Vagrant.Extras.Vagrant.SubmitAssemblies(Nessos.Vagrant.Vagrant,Nessos.Vagrant.Extras.IRemoteAssemblyReceiver,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
 <summary>
     Apply a built-in assembly distribution protocol using a user-defined submit function.
 </summary>
 <param name="receiver">User provided assembly submit operation.</param>
 <param name="assemblies">Assemblies to be exported.</param>
</member>
<member name="T:Nessos.Vagrant.Extras">
<summary>
 Collection of extensions and utilities for use with Vagrant
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Nessos.Vagrant.Serialization">

</member>
<member name="M:Nessos.Vagrant.SliceCompiler.compileDynamicAssemblySlices(Microsoft.FSharp.Core.FSharpFunc{System.Reflection.Assembly,System.Boolean},System.Boolean,Nessos.Vagrant.SliceCompilerTypes.DynamicAssemblyCompilerState,Microsoft.FSharp.Collections.FSharpList{System.Reflection.Assembly})">
<summary>
 compiles a collection of assemblies
</summary>
</member>
<member name="M:Nessos.Vagrant.SliceCompiler.compileDynamicAssemblySlice(Nessos.Vagrant.SliceCompilerTypes.DynamicAssemblyCompilerState,Nessos.Vagrant.SliceCompilerTypes.DynamicAssemblyState,Microsoft.FSharp.Collections.FSharpMap{System.String,Nessos.Vagrant.AssemblyParser.TypeParseInfo},Mono.Cecil.AssemblyDefinition)">
<summary>
 compiles a slice of given dynamic assembly snapshot
</summary>
</member>
<member name="M:Nessos.Vagrant.SliceCompiler.initCompilerState(Microsoft.FSharp.Collections.FSharpList{Nessos.Vagrant.IDynamicAssemblyProfile},System.String)">
<summary>
 create an initial, empty compiler state
</summary>
</member>
<member name="T:Nessos.Vagrant.SliceCompiler">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Nessos.Vagrant.SliceCompilerTypes">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Nessos.Vagrant.Utils.AssemblyIdGenerator">
<summary>
 computes a unique assembly identifier
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Nessos.Vagrant.Utils.Exn`1.Value">
<summary>
 evaluate, re-raising the exception if failed
</summary>
</member>
<member name="T:Nessos.Vagrant.Utils.Exn`1">
<summary>
 Value or exception
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Nessos.Vagrant.Utils.tryLoadAssembly(System.String)">
<summary>
 try get assembly loaded in appdomain or load it now
</summary>
</member>
<member name="P:Nessos.Vagrant.Utils.tryGetLoadedAssembly">
<summary>
 try get assembly that is loaded in current appdomain
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Nessos.Vagrant.Utils.Convert.toBase32String(System.Byte[])">
<summary>
 convert bytes to base-32 string: useful for file names in case-insensitive file systems
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Nessos.Vagrant.Utils.Convert">

</member>
<member name="">

</member>
<member name="T:Nessos.Vagrant.Utils.Option">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Nessos.Vagrant.Utils.Exn">

</member>
<member name="T:Nessos.Vagrant.Utils">

</member>
<member name="">

</member>
<member name="T:System.AssemblyVersionInformation">

</member>
</members>
</doc>
