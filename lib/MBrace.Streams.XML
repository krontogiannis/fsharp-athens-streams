<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>MBrace.Streams</name></assembly>
<members>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:MBrace.Streams.CloudArray.New``1(System.Collections.Generic.IEnumerable{``0},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Int64},Microsoft.FSharp.Core.FSharpOption{MBrace.Store.ISerializer})">
 <summary>
 Create a new cloud array.
 </summary>
 <param name="values">Collection to populate the cloud array with.</param>
 <param name="directory">FileStore directory used for cloud seq. Defaults to execution context.</param>
 <param name="serializer">Serializer used in sequence serialization. Defaults to execution context.</param>
 <param name="partitionSize">Approximate partition size in bytes.</param>
</member>
<member name="T:MBrace.Streams.CloudArray">
<summary>
 Provides methods on CloudArrays.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:MBrace.Streams.CloudArray`1.PartitionCount">
<summary>
 Number of partitions.
</summary>
</member>
<member name="P:MBrace.Streams.CloudArray`1.Length">
<summary>
 Length of the cloud array.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:MBrace.Streams.CloudArray`1.GetPartition(System.Int32)">
<summary>
 Fetch nth partition as an array.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:MBrace.Streams.CloudArray`1.Append(MBrace.Streams.CloudArray{`0})">
<summary>
 Builds a new cloud array that contains partitions from the first
 cloud array followed by partitions of the second cloud array.
</summary>
</member>
<member name="">

</member>
<member name="T:MBrace.Streams.CloudArray`1">
<summary>
 Represents a finite and immutable and ordered sequence of
 elements that is stored in the underlying CloudStore
 in partitions.
</summary>
</member>
<member name="P:MBrace.Streams.CloudFile.ReadLines">
<summary>
 Read lazily the given stream as a sequence of lines.
</summary>
</member>
<member name="P:MBrace.Streams.CloudFile.ReadAllText">
<summary>
 Read the given stream as a string.
</summary>
</member>
<member name="P:MBrace.Streams.CloudFile.ReadAllLines">
<summary>
 Read the given stream as an array of lines.
</summary>
</member>
<member name="P:MBrace.Streams.CloudFile.ReadAllBytes">
<summary>
 Read the given stream as an array of bytes.
</summary>
</member>
<member name="T:MBrace.Streams.CloudFile">
<summary>
 Common readers for a CloudFile.
</summary>
</member>
<member name="P:MBrace.Streams.CloudStream`1.DegreeOfParallelism">
<summary>
 The number of concurrently executing tasks
</summary>
</member>
<member name="M:MBrace.Streams.CloudStream`1.Apply``2(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Nessos.Streams.Collector{`0,``0}},Microsoft.FSharp.Core.FSharpFunc{``0,MBrace.Cloud{``1}},Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``1,``1}})">
<summary>
 Applies the given collector to the CloudStream.
</summary>
</member>
<member name="T:MBrace.Streams.CloudStream`1">
<summary>
 Represents a distributed Stream of values.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MBrace.Streams.Descriptor`1">
<summary>
 CloudArray description.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:MBrace.Streams.Partition`1.StartIndex">
<summary>
 Index of the first element.
</summary>
</member>
<member name="">

</member>
<member name="P:MBrace.Streams.Partition`1.Path">
<summary>
 Path to Partition in store.
</summary>
</member>
<member name="P:MBrace.Streams.Partition`1.Length">
<summary>
 Partition length.
</summary>
</member>
<member name="">

</member>
<member name="P:MBrace.Streams.Partition`1.EndIndex">
<summary>
 Index of the last element.
</summary>
</member>
<member name="">

</member>
<member name="M:MBrace.Streams.Partition`1.ToArray">
<summary>
 Read the entire partition.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MBrace.Streams.PartitionedEnumerable`1">
<summary>
 Helper type to partition a seq&lt;&apos;T&gt; to seq&lt;seq&lt;&apos;T&gt;&gt; using a predicate
</summary>
</member>
<member name="M:MBrace.Streams.CloudStreamModule.sortBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Int32,MBrace.Streams.CloudStream{``0})">
 <summary>Applies a key-generating function to each element of the input CloudStream and yields the CloudStream of the given length, ordered by keys.</summary>
 <param name="projection">A function to transform items of the input CloudStream into comparable keys.</param>
 <param name="stream">The input CloudStream.</param>
 <param name="takeCount">The number of elements to return.</param>
 <returns>The result CloudStream.</returns>  
</member>
<member name="M:MBrace.Streams.CloudStreamModule.toCloudArray``1(MBrace.Streams.CloudStream{``0})">
 <summary>Creates a CloudArray from the given CloudStream.</summary>
 <param name="stream">The input CloudStream.</param>
 <returns>The result CloudArray.</returns>    
</member>
<member name="M:MBrace.Streams.CloudStreamModule.toArray``1(MBrace.Streams.CloudStream{``0})">
 <summary>Creates an array from the given CloudStream.</summary>
 <param name="stream">The input CloudStream.</param>
 <returns>The result array.</returns>    
</member>
<member name="M:MBrace.Streams.CloudStreamModule.length``1(MBrace.Streams.CloudStream{``0})">
 <summary>Returns the total number of elements of the CloudStream.</summary>
 <param name="stream">The input CloudStream.</param>
 <returns>The total number of elements.</returns>
</member>
<member name="M:MBrace.Streams.CloudStreamModule.sum``1(MBrace.Streams.CloudStream{``0})">
 <summary>Returns the sum of the elements.</summary>
 <param name="stream">The input CloudStream.</param>
 <returns>The sum of the elements.</returns>
</member>
<member name="M:MBrace.Streams.CloudStreamModule.countBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},MBrace.Streams.CloudStream{``0})">
 <summary>
 Applies a key-generating function to each element of a CloudStream and return a CloudStream yielding unique keys and their number of occurrences in the original sequence.
 </summary>
 <param name="projection">A function that maps items from the input CloudStream to keys.</param>
 <param name="stream">The input CloudStream.</param>
</member>
<member name="M:MBrace.Streams.CloudStreamModule.foldBy``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,``2}},Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``2,``2}},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``2},MBrace.Streams.CloudStream{``0})">
 <summary>Applies a key-generating function to each element of a CloudStream and return a CloudStream yielding unique keys and the result of the threading an accumulator.</summary>
 <param name="projection">A function to transform items from the input CloudStream to keys.</param>
 <param name="folder">A function that updates the state with each element from the CloudStream.</param>
 <param name="combiner">A function that combines partial states into a new state.</param>
 <param name="state">A function that produces the initial state.</param>
 <param name="stream">The input CloudStream.</param>
 <returns>The final result.</returns>
</member>
<member name="M:MBrace.Streams.CloudStreamModule.fold``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``0}},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0},MBrace.Streams.CloudStream{``1})">
 <summary>Applies a function to each element of the CloudStream, threading an accumulator argument through the computation. If the input function is f and the elements are i0...iN, then this function computes f (... (f s i0)...) iN.</summary>
 <param name="folder">A function that updates the state with each element from the CloudStream.</param>
 <param name="combiner">A function that combines partial states into a new state.</param>
 <param name="state">A function that produces the initial state.</param>
 <param name="stream">The input CloudStream.</param>
 <returns>The final result.</returns>
</member>
<member name="M:MBrace.Streams.CloudStreamModule.withDegreeOfParallelism``1(System.Int32,MBrace.Streams.CloudStream{``0})">
 <summary>Returns a cloud stream with a new degree of parallelism.</summary>
 <param name="degreeOfParallelism">The degree of parallelism.</param>
 <param name="stream">The input cloud stream.</param>
 <returns>The result cloud stream.</returns>
</member>
<member name="M:MBrace.Streams.CloudStreamModule.filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},MBrace.Streams.CloudStream{``0})">
 <summary>Filters the elements of the input CloudStream.</summary>
 <param name="predicate">A function to test each source element for a condition.</param>
 <param name="stream">The input CloudStream.</param>
 <returns>The result CloudStream.</returns>
</member>
<member name="M:MBrace.Streams.CloudStreamModule.collect``2(Microsoft.FSharp.Core.FSharpFunc{``0,Nessos.Streams.Stream{``1}},MBrace.Streams.CloudStream{``0})">
 <summary>Transforms each element of the input CloudStream to a new stream and flattens its elements.</summary>
 <param name="f">A function to transform items from the input CloudStream.</param>
 <param name="stream">The input CloudStream.</param>
 <returns>The result CloudStream.</returns>
</member>
<member name="M:MBrace.Streams.CloudStreamModule.flatMap``2(Microsoft.FSharp.Core.FSharpFunc{``0,Nessos.Streams.Stream{``1}},MBrace.Streams.CloudStream{``0})">
 <summary>Transforms each element of the input CloudStream to a new stream and flattens its elements.</summary>
 <param name="f">A function to transform items from the input CloudStream.</param>
 <param name="stream">The input CloudStream.</param>
 <returns>The result CloudStream.</returns>
</member>
<member name="M:MBrace.Streams.CloudStreamModule.map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},MBrace.Streams.CloudStream{``0})">
 <summary>Transforms each element of the input CloudStream.</summary>
 <param name="f">A function to transform items from the input CloudStream.</param>
 <param name="stream">The input CloudStream.</param>
 <returns>The result CloudStream.</returns>
</member>
<member name="M:MBrace.Streams.CloudStreamModule.cache``1(MBrace.Streams.CloudArray{``0})">
 <summary>
 Returns a cached version of the given CloudArray.
 </summary>
 <param name="source">The input CloudArray.</param>
</member>
<member name="M:MBrace.Streams.CloudStreamModule.ofCloudArray``1(MBrace.Streams.CloudArray{``0})">
 <summary>
 Constructs a CloudStream from a CloudArray.
 </summary>
 <param name="source">The input CloudArray.</param>
</member>
<member name="M:MBrace.Streams.CloudStreamModule.ofCloudFiles``1(Microsoft.FSharp.Core.FSharpFunc{System.IO.Stream,Microsoft.FSharp.Control.FSharpAsync{``0}},System.Collections.Generic.IEnumerable{MBrace.CloudFile})">
 <summary>
 Constructs a CloudStream from a collection of CloudFiles using the given reader.
 </summary>
 <param name="reader">A function to transform the contents of a CloudFile to an object.</param>
 <param name="sources">The collection of CloudFiles.</param>
</member>
<member name="M:MBrace.Streams.CloudStreamModule.ofArray``1(``0[])">
 <summary>Wraps array as a CloudStream.</summary>
 <param name="source">The input array.</param>
 <returns>The result CloudStream.</returns>
</member>
<member name="P:MBrace.Streams.CloudStreamModule.maxCloudFileCombinedLength">
<summary>
 Maximum combined stream length used in ofCloudFiles.
</summary>
</member>
<member name="T:MBrace.Streams.CloudStreamModule">
<summary>
 Provides basic operations on CloudStreams.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MBrace.Streams.Internals.CSharpProxy">
<summary>
 [omit]
 Proxy for FSharp type specialization and lambda inlining.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MBrace.Streams.Partitions">

</member>
<member name="">

</member>
<member name="T:System.AssemblyVersionInformation">

</member>
</members>
</doc>
